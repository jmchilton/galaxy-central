define(["libs/underscore","libs/d3","viz/trackster/util","viz/visualization","viz/trackster/tracks","mvc/tools","mvc/data","utils/config","mvc/ui/icon-button"],function(r,q,e,k,n,o,s,p,i){var l=Backbone.Model.extend({defaults:{inputs:null,values:null}});var b=Backbone.Model.extend({defaults:{tool:null,tree_data:null},initialize:function(u){var t=this;this.get("tool").get("inputs").each(function(v){v.on("change:min change:max change:num_samples",function(w){if(w.get("in_ptree")){t.set_tree_data()}},t);v.on("change:in_ptree",function(w){if(w.get("in_ptree")){t.add_param(w)}else{t.remove_param(w)}t.set_tree_data()},t)});if(u.config){r.each(u.config,function(w){var v=t.get("tool").get("inputs").find(function(x){return x.get("name")===w.name});t.add_param(v);v.set(w)})}},add_param:function(t){if(t.get("ptree_index")){return}t.set("in_ptree",true);t.set("ptree_index",this.get_tree_params().length)},remove_param:function(t){t.set("in_ptree",false);t.set("ptree_index",null);r(this.get_tree_params()).each(function(u,v){u.set("ptree_index",v+1)})},set_tree_data:function(){var u=r.map(this.get_tree_params(),function(w){return{param:w,samples:w.get_samples()}});var t=0,v=function(z,w){var B=z[w],A=B.param,y=A.get("label"),x=B.samples;if(z.length-1===w){return r.map(x,function(C){return{id:t++,name:C,param:A,value:C}})}return r.map(x,function(C){return{id:t++,name:C,param:A,value:C,children:v(z,w+1)}})};this.set("tree_data",{name:"Root",id:t++,children:(u.length!==0?v(u,0):null)})},get_tree_params:function(){return r(this.get("tool").get("inputs").where({in_ptree:true})).sortBy(function(t){return t.get("ptree_index")})},get_num_leaves:function(){return this.get_tree_params().reduce(function(t,u){return t*u.get_samples().length},1)},get_node_settings:function(x){var v=this.get("tool").get_inputs_dict();var y=x.parent;if(y){while(y.depth!==0){v[y.param.get("name")]=y.value;y=y.parent}}var t=this,u=function(A,z){if(A.param){z[A.param.get("name")]=A.value}if(!A.children){return new l({inputs:t.get("tool").get("inputs"),values:z})}else{return r.flatten(r.map(A.children,function(B){return u(B,r.clone(z))}))}},w=u(x,v);if(!r.isArray(w)){w=[w]}return w},get_connected_nodes:function(v){var w=function(x){if(!x.children){return x}else{return r.flatten([x,r.map(x.children,function(y){return w(y)})])}};var u=[],t=v.parent;while(t){u.push(t);t=t.parent}return r.flatten([u,w(v)])},get_leaf:function(u){var v=this.get("tree_data"),t=function(w){return r.find(w,function(x){return u[x.param.get("name")]===x.value})};while(v.children){v=t(v.children)}return v},toJSON:function(){return this.get_tree_params().map(function(t){return{name:t.get("name"),min:t.get("min"),max:t.get("max"),num_samples:t.get("num_samples")}})}});var d=Backbone.Model.extend({defaults:{track:null,mode:"Pack",settings:null,regions:null},initialize:function(t){this.set("regions",t.regions);if(t.track){var u=r.extend({data_url:galaxy_config.root+"dummy1",converted_datasets_state_url:galaxy_config.root+"dummy2"},t.track);this.set("track",n.object_from_template(u,{},null))}},same_settings:function(t){var u=this.get("settings"),v=t.get("settings");for(var w in u){if(!v[w]||u[w]!==v[w]){return false}}return true},toJSON:function(){return{track:this.get("track").to_dict(),settings:this.get("settings"),regions:this.get("regions")}}});var m=Backbone.Collection.extend({model:d});var c=k.Visualization.extend({defaults:r.extend({},k.Visualization.prototype.defaults,{dataset:null,tool:null,parameter_tree:null,regions:null,tracks:null,default_mode:"Pack"}),initialize:function(t){this.set("dataset",new s.Dataset(t.dataset));this.set("tool",new o.Tool(t.tool));this.set("regions",new k.GenomeRegionCollection(t.regions));this.set("tracks",new m(t.tracks));var u=this.get("tool");this.set("tool_with_samplable_inputs",u);u.remove_inputs(["data","hidden_data","conditional","text"]);this.set("parameter_tree",new b({tool:u,config:t.tree_config}))},add_track:function(t){this.get("tracks").add(t)},toJSON:function(){return{id:this.get("id"),title:"Parameter exploration for dataset '"+this.get("dataset").get("name")+"'",type:"sweepster",dataset_id:this.get("dataset").id,tool_id:this.get("tool").id,regions:this.get("regions").toJSON(),tree_config:this.get("parameter_tree").toJSON(),tracks:this.get("tracks").toJSON()}}});var h=Backbone.View.extend({tagName:"tr",TILE_LEN:250,initialize:function(t){this.canvas_manager=t.canvas_manager;this.render();this.model.on("change:track change:mode",this.draw_tiles,this)},render:function(){var y=this.model.get("settings"),u=y.get("values"),w=$("<td/>").addClass("settings").appendTo(this.$el),v=$("<div/>").addClass("track-info").hide().appendTo(w);v.append($("<div/>").css("font-weight","bold").text("Track Settings"));y.get("inputs").each(function(A){v.append(A.get("label")+": "+u[A.get("name")]+"<br/>")});var t=this,z=$("<button/>").appendTo(v).text("Run on complete dataset").click(function(){v.toggle();t.trigger("run_on_dataset",y)});var x=i.create_icon_buttons_menu([{title:"Settings",icon_class:"gear track-settings",on_click:function(){v.toggle()}},{title:"Remove",icon_class:"cross-circle",on_click:function(){t.$el.remove();$(".tooltip").remove()}}]);w.prepend(x.$el);this.model.get("regions").each(function(){t.$el.append($("<td/>").addClass("tile").html($("<img/>").attr("src",galaxy_config.root+"images/loading_large_white_bg.gif")))});if(this.model.get("track")){this.draw_tiles()}},draw_tiles:function(){var u=this,t=this.model.get("track"),w=this.model.get("regions"),v=this.$el.find("td.tile");if(!t){return}$.when(t.data_manager.data_is_ready()).then(function(x){w.each(function(A,z){var y=A.length()/u.TILE_LEN,C=1/y,B=u.model.get("mode");$.when(t.data_manager.get_data(A,B,y,{})).then(function(E){var D=u.canvas_manager.new_canvas();D.width=u.TILE_LEN;D.height=t.get_canvas_height(E,B,C,D.width);t.draw_tile(E,D.getContext("2d"),B,A,C);$(v[z]).empty().append(D)})})})}});var g=Backbone.View.extend({number_input_template:'<div class="form-row-input sweep"><input class="min" type="text" size="6" value="<%= min %>"> - <input class="max" type="text" size="6" value="<%= max %>"> samples: <input class="num_samples" type="text" size="1" value="<%= num_samples %>"></div>',select_input_template:'<div class="form-row-input sweep"><%= options %></div>',initialize:function(t){this.$el=t.tool_row;this.render()},render:function(){var u=this.model,y=u.get("type"),A=this.$el.find(".form-row-input"),w=null;A.find(":input").change(function(){u.set("value",$(this).val())});if(u instanceof o.IntegerToolParameter){w=$(r.template(this.number_input_template,this.model.toJSON()))}else{if(u instanceof o.SelectToolParameter){var v=r.map(this.$el.find("select option"),function(B){return $(B).val()}),x=v.join(", ");w=$(r.template(this.select_input_template,{options:x}))}}w.insertAfter(A);var t=this,z=i.create_icon_buttons_menu([{title:"Add parameter to tree",icon_class:"plus-button",on_click:function(){u.set("in_ptree",true);A.hide();w.show();$(this).hide();t.$el.find(".icon-button.toggle").show()}},{title:"Remove parameter from tree",icon_class:"toggle",on_click:function(){u.set("in_ptree",false);w.hide();A.show();$(this).hide();t.$el.find(".icon-button.plus-button").show()}}],{});this.$el.prepend(z.$el);if(u.get("in_ptree")){A.hide();t.$el.find(".icon-button.plus-button").hide()}else{t.$el.find(".icon-button.toggle").hide();w.hide()}r.each(["min","max","num_samples"],function(B){w.find("."+B).change(function(){u.set(B,parseFloat($(this).val()))})})}});var j=Backbone.View.extend({className:"tree-design",initialize:function(t){this.render()},render:function(){var v=new o.ToolFormView({model:this.model.get("tool")});v.render();this.$el.append(v.$el);var u=this,t=u.model.get("tool").get("inputs");this.$el.find(".form-row").not(".form-actions").each(function(w){var x=new g({model:t.at(w),tool_row:$(this)})})}});var a=Backbone.View.extend({className:"tool-parameter-tree",initialize:function(t){this.model.on("change:tree_data",this.render,this)},render:function(){this.$el.children().remove();var B=this.model.get_tree_params();if(!B.length){return}this.width=100*(2+B.length);this.height=15*this.model.get_num_leaves();var A=this;var z=q.layout.cluster().size([this.height,this.width-160]);var v=q.svg.diagonal().projection(function(C){return[C.y,C.x]});var t=z.nodes(this.model.get("tree_data"));var w=r.uniq(r.pluck(t,"y"));r.each(B,function(E,D){var C=w[D+1],F=$("#center").position().left;A.$el.append($("<div>").addClass("label").text(E.get("label")).css("left",C+F))});var u=q.select(this.$el[0]).append("svg").attr("width",this.width).attr("height",this.height+30).append("g").attr("transform","translate(40, 20)");var y=u.selectAll("path.link").data(z.links(t)).enter().append("path").attr("class","link").attr("d",v);var x=u.selectAll("g.node").data(t).enter().append("g").attr("class","node").attr("transform",function(C){return"translate("+C.y+","+C.x+")"}).on("mouseover",function(D){var C=r.pluck(A.model.get_connected_nodes(D),"id");x.filter(function(E){return r.find(C,function(F){return F===E.id})!==undefined}).style("fill","#f00")}).on("mouseout",function(){x.style("fill","#000")});x.append("circle").attr("r",9);x.append("text").attr("dx",function(C){return C.children?-12:12}).attr("dy",3).attr("text-anchor",function(C){return C.children?"end":"start"}).text(function(C){return C.name})}});var f=Backbone.View.extend({className:"Sweepster",helpText:"<div><h4>Getting Started</h4><ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.<li>Adjust the tree by using parameter inputs to select min, max, and number of samples<li>Run the tool with different settings by clicking on tree nodes</ol></div>",initialize:function(u){this.canvas_manager=new k.CanvasManager(this.$el.parents("body"));this.tool_param_tree_view=new a({model:this.model.get("parameter_tree")});this.track_collection_container=$("<table/>").addClass("tracks");this.model.get("parameter_tree").on("change:tree_data",this.handle_node_clicks,this);var t=this;this.model.get("tracks").each(function(v){v.get("track").view=t});this.config=p.ConfigSettingCollection.from_models_and_saved_values([{key:"name",label:"Name",type:"text",default_value:""},{key:"a_color",label:"A Color",type:"color",default_value:"#FF0000"},{key:"c_color",label:"C Color",type:"color",default_value:"#00FF00"},{key:"g_color",label:"G Color",type:"color",default_value:"#0000FF"},{key:"t_color",label:"T Color",type:"color",default_value:"#FF00FF"},{key:"n_color",label:"N Color",type:"color",default_value:"#AAAAAA"},{key:"block_color",label:"Block color",type:"color"},{key:"reverse_strand_color",label:"Antisense strand color",type:"color"},],{})},render:function(){var z=new j({model:this.model.get("parameter_tree")});$("#left").append(z.$el);var C=this,w=C.model.get("regions"),A=$("<tr/>").appendTo(this.track_collection_container);w.each(function(D){A.append($("<th>").text(D.toString()))});A.children().first().attr("colspan",2);var x=$("<div>").addClass("tiles");$("#right").append(x.append(this.track_collection_container));C.model.get("tracks").each(function(D){C.add_track(D)});var B=$(this.helpText).addClass("help"),y=i.create_icon_buttons_menu([{title:"Close",icon_class:"cross-circle",on_click:function(){$(".tooltip").remove();B.remove()}}]);B.prepend(y.$el.css("float","right"));$("#center").append(B);this.tool_param_tree_view.render();$("#center").append(this.tool_param_tree_view.$el);this.handle_node_clicks();var v=i.create_icon_buttons_menu([{icon_class:"chevron-expand",title:"Set display mode"},{icon_class:"cross-circle",title:"Close",on_click:function(){window.location="${h.url_for( controller='visualization', action='list' )}"}}],{tooltip_config:{placement:"bottom"}});var u=["Squish","Pack"],t={};r.each(u,function(D){t[D]=function(){C.model.set("default_mode",D);C.model.get("tracks").each(function(E){E.set("mode",D)})}});make_popupmenu(v.$el.find(".chevron-expand"),t);v.$el.attr("style","float: right");$("#right .unified-panel-header-inner").append(v.$el)},get_base_color:function(t){return this.config.get_value(t.toLowerCase()+"_color")||this.config.get_value("n_color")},run_tool_on_dataset:function(u){var t=this.model.get("tool"),w=t.get("name"),v=this.model.get("dataset");t.set_input_values(u.get("values"));$.when(t.rerun(v)).then(function(x){});show_modal("Running "+w+" on complete dataset",w+" is running on dataset '"+v.get("name")+"'. Outputs are in the dataset's history.",{Ok:function(){hide_modal()}})},add_track:function(w){var u=this,v=this.model.get("parameter_tree");u.model.add_track(w);var t=new h({model:w,canvas_manager:u.canvas_manager});t.on("run_on_dataset",u.run_tool_on_dataset,u);u.track_collection_container.append(t.$el);t.$el.hover(function(){var y=v.get_leaf(w.get("settings").get("values"));var x=r.pluck(v.get_connected_nodes(y),"id");q.select(u.tool_param_tree_view.$el[0]).selectAll("g.node").filter(function(z){return r.find(x,function(A){return A===z.id})!==undefined}).style("fill","#f00")},function(){q.select(u.tool_param_tree_view.$el[0]).selectAll("g.node").style("fill","#000")});return w},handle_node_clicks:function(){var t=this,u=this.model.get("parameter_tree"),w=this.model.get("regions"),v=q.select(this.tool_param_tree_view.$el[0]).selectAll("g.node");v.on("click",function(C,z){var y=t.model.get("tool"),B=t.model.get("dataset"),A=u.get_node_settings(C),x=$.Deferred();if(A.length>=10){show_modal("Whoa there cowboy!","You clicked on a node to try "+t.model.get("tool").get("name")+" with "+A.length+" different combinations of settings. You can only run 10 jobs at a time.",{Ok:function(){hide_modal();x.resolve(false)}})}else{x.resolve(true)}$.when(x).then(function(D){if(!D){return}var E=r.map(A,function(F){var G=new d({settings:F,regions:w,mode:t.model.get("default_mode")});t.add_track(G);return G});r.each(E,function(G,F){setTimeout(function(){y.set_input_values(G.get("settings").get("values"));$.when(y.rerun(B,w)).then(function(I){var J=I.first(),K=J.get("track_config");K.dataset=J;K.tool=null;K.prefs=t.config.to_key_value_dict();var H=n.object_from_template(K,t,null);H.init_for_tool_data();G.set("track",H)})},F*10000)})})})}});return{SweepsterVisualization:c,SweepsterVisualizationView:f}});